#include "LedControl.h"

LedControl lc = LedControl(13, 9, 11, 2); //DIN, CLK, CS
int dlay = 50; // delay of 50ms per frame
char state = 'I'; //initial state (idle)

//left turn animation
const byte LEFT[][8] = {
  {
    B00000000,
    B00000000,
    B00000000,
    B00000001,
    B00000001,
    B00000000,
    B00000000,
    B00000000
  }, {
    B00000000,
    B00000000,
    B00000001,
    B00000010,
    B00000010,
    B00000001,
    B00000000,
    B00000000
  }, {
    B00000000,
    B00000001,
    B00000010,
    B00000100,
    B00000100,
    B00000010,
    B00000001,
    B00000000
  }, {
    B00000001,
    B00000010,
    B00000100,
    B00001001,
    B00001001,
    B00000100,
    B00000010,
    B00000001
  }, {
    B00000010,
    B00000100,
    B00001001,
    B00010010,
    B00010010,
    B00001001,
    B00000100,
    B00000010
  }, {
    B00000100,
    B00001001,
    B00010010,
    B00100100,
    B00100100,
    B00010010,
    B00001001,
    B00000100
  }, {
    B00001001,
    B00010010,
    B00100100,
    B01001001,
    B01001001,
    B00100100,
    B00010010,
    B00001001
  }, {
    B00010010,
    B00100100,
    B01001001,
    B10010010,
    B10010010,
    B01001001,
    B00100100,
    B00010010
  }, {
    B00100100,
    B01001001,
    B10010010,
    B00100100,
    B00100100,
    B10010010,
    B01001001,
    B00100100
  }, {
    B01001001,
    B10010010,
    B00100100,
    B01001000,
    B01001000,
    B00100100,
    B10010010,
    B01001001
  }, {
    B10010010,
    B00100100,
    B01001000,
    B10010000,
    B10010000,
    B01001000,
    B00100100,
    B10010010
  }, {
    B00100100,
    B01001000,
    B10010000,
    B00100000,
    B00100000,
    B10010000,
    B01001000,
    B00100100
  }, {
    B01001000,
    B10010000,
    B00100000,
    B01000000,
    B01000000,
    B00100000,
    B10010000,
    B01001000
  }, {
    B10010000,
    B00100000,
    B01000000,
    B10000000,
    B10000000,
    B01000000,
    B00100000,
    B10010000
  }, {
    B00100000,
    B01000000,
    B10000000,
    B00000000,
    B00000000,
    B10000000,
    B01000000,
    B00100000
  }, {
    B01000000,
    B10000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B10000000,
    B01000000
  }, {
    B10000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B10000000
  }
};
//right turn animation
const byte RIGHT[][8] = {
  {
    B00000000,
    B00000000,
    B00000000,
    B10000000,
    B10000000,
    B00000000,
    B00000000,
    B00000000
  }, {
    B00000000,
    B00000000,
    B10000000,
    B01000000,
    B01000000,
    B10000000,
    B00000000,
    B00000000
  }, {
    B00000000,
    B10000000,
    B01000000,
    B00100000,
    B00100000,
    B01000000,
    B10000000,
    B00000000
  }, {
    B10000000,
    B01000000,
    B00100000,
    B10010000,
    B10010000,
    B00100000,
    B01000000,
    B10000000
  }, {
    B01000000,
    B00100000,
    B10010000,
    B01001000,
    B01001000,
    B10010000,
    B00100000,
    B01000000
  }, {
    B00100000,
    B10010000,
    B01001000,
    B00100100,
    B00100100,
    B01001000,
    B10010000,
    B00100000
  }, {
    B10010000,
    B01001000,
    B00100100,
    B10010010,
    B10010010,
    B00100100,
    B01001000,
    B10010000
  }, {
    B01001000,
    B00100100,
    B10010010,
    B01001001,
    B01001001,
    B10010010,
    B00100100,
    B01001000
  }, {
    B00100100,
    B10010010,
    B01001001,
    B00100100,
    B00100100,
    B01001001,
    B10010010,
    B00100100
  }, {
    B10010010,
    B01001001,
    B00100100,
    B00010010,
    B00010010,
    B00100100,
    B01001001,
    B10010010
  }, {
    B01001001,
    B00100100,
    B00010010,
    B00001001,
    B00001001,
    B00010010,
    B00100100,
    B01001001
  }, {
    B00100100,
    B00010010,
    B00001001,
    B00000100,
    B00000100,
    B00001001,
    B00010010,
    B00100100
  }, {
    B00010010,
    B00001001,
    B00000100,
    B00000010,
    B00000010,
    B00000100,
    B00001001,
    B00010010
  }, {
    B00001001,
    B00000100,
    B00000010,
    B00000001,
    B00000001,
    B00000010,
    B00000100,
    B00001001
  }, {
    B00000100,
    B00000010,
    B00000001,
    B00000000,
    B00000000,
    B00000001,
    B00000010,
    B00000100
  }, {
    B00000010,
    B00000001,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000001,
    B00000010
  }, {
    B00000001,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000001
  }
};
//idle animation (forward)
const byte IDLE[][8] = {
  {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00011000
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00011000,
    B00000000
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00011000,
    B00000000,
    B00111100
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00011000,
    B00000000,
    B00111100,
    B00000000
  }, {
    B00000000,
    B00000000,
    B00000000,
    B00011000,
    B00000000,
    B00111100,
    B00000000,
    B01111110
  }, {
    B00000000,
    B00000000,
    B00011000,
    B00000000,
    B00111100,
    B00000000,
    B01111110,
    B00000000
  }, {
    B00000000,
    B00011000,
    B00000000,
    B00111100,
    B00000000,
    B01111110,
    B00000000,
    B11111111
  }, {
    B00011000,
    B00000000,
    B00111100,
    B00000000,
    B01111110,
    B00000000,
    B11111111,
    B00000000
  }, {
    B00000000,
    B00111100,
    B00000000,
    B01111110,
    B00000000,
    B11111111,
    B00000000,
    B00000000
  }, {
    B00111100,
    B00000000,
    B01111110,
    B00000000,
    B11111111,
    B00000000,
    B00000000,
    B00000000
  }, {
    B00000000,
    B01111110,
    B00000000,
    B11111111,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  }, {
    B01111110,
    B00000000,
    B11111111,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  }, {
    B00000000,
    B11111111,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  }, {
    B11111111,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000
  }
};
void setup() {
  Serial.begin(38400);
  lc.shutdown(0, false); // Wake up displays
  lc.shutdown(1, false);
  lc.setIntensity(0, 15); // Set intensity levels
  lc.setIntensity(1, 15);
  lc.clearDisplay(0);  // Clear Displays
  lc.clearDisplay(1);
}
//read value from handlebars
void read() {
  while (Serial.available() > 0) { //flush useless data in stream
    char value = Serial.read();
    if (value == 'R' || value == 'L' || value == 'I') {
      state = value;
    }
  }
}

}
void loop() {
  int i = 0;
  int len;
  Serial.begin(38400);
  do {
    if (state == 'R') {
      len = sizeof(RIGHT) / 8;
      for (int j = 0; j < 8; j++) {
        lc.setRow(0, j, RIGHT[i][j]);
        lc.setRow(1, j, RIGHT[i][j]);
      }
    }
    if (state == 'L') {
      len = sizeof(LEFT) / 8;
      for (int j = 0; j < 8; j++) {
        lc.setRow(0, j, LEFT[i][j]);
        lc.setRow(1, j, LEFT[i][j]);
      }
    }
    if (state == 'I') {
      len = sizeof(IDLE) / 8;
      for (int j = 0; j < 8; j++) {
        lc.setRow(0, j, IDLE[i][j]);
        lc.setRow(1, j, IDLE[i][j]);
      }
    } 
    if (i < len - 1) {
      i++;
    } else {
      i = 0;
    }
    delay(dlay);
  } while (Serial.available() < 1);
  read();
}
